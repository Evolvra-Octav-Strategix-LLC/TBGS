# TBGS Complete Infrastructure Stack
name: tbgs

networks:
  tbgs-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  nextcloud_data:
    driver: local
  nextcloud_apps:
    driver: local
  nextcloud_config:
    driver: local
  portainer_data:
    driver: local
  pgadmin_data:
    driver: local
  npm_data:
    driver: local
  npm_ssl:
    driver: local

services:
  # Main TBGS Application
  tbgs-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tbgs-app
    restart: unless-stopped

    environment:
      - NODE_ENV=production
    ports:
      - "3000:3000"  # Direct access for testing via IP
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    networks:
      - tbgs-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tbgs-postgres
    restart: unless-stopped

    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Nextcloud database credentials for init script
      NEXTCLOUD_DB_USER: ${NEXTCLOUD_DB_USER}
      NEXTCLOUD_DB_PASSWORD: ${NEXTCLOUD_DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./010-nextcloud-init.sh:/docker-entrypoint-initdb.d/010-nextcloud-init.sh:ro
    networks:
      - tbgs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5


  # Nginx Proxy Manager (Only External Access Point)
  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: tbgs-nginx-proxy-manager
    restart: unless-stopped
    ports:
      - "80:80"           # HTTP
      - "443:443"         # HTTPS  
      - "8081:81"         # Admin Panel (open for domain configuration)
    environment:
      DB_SQLITE_FILE: "/data/database.db"
    volumes:
      - npm_data:/data
      - npm_ssl:/etc/letsencrypt
    networks:
      - tbgs-network
    depends_on:
      - tbgs-app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:81/api/nginx/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dashy Dashboard
  dashy:
    image: lissy93/dashy:latest
    container_name: tbgs-dashy
    restart: unless-stopped
    volumes:
      - ./dashy/conf.yml:/app/public/conf.yml:ro
    networks:
      - tbgs-network
    healthcheck:
      test: ["CMD", "node", "/app/services/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tbgs-pgadmin
    restart: unless-stopped

    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - tbgs-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nextcloud File Storage
  nextcloud:
    image: nextcloud:28-apache
    container_name: tbgs-nextcloud
    restart: unless-stopped

    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: nextcloud
      POSTGRES_USER: ${NEXTCLOUD_DB_USER}
      POSTGRES_PASSWORD: ${NEXTCLOUD_DB_PASSWORD}
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD}
      NEXTCLOUD_TRUSTED_DOMAINS: ${NEXTCLOUD_TRUSTED_DOMAINS}
      OVERWRITEPROTOCOL: https
      OVERWRITEHOST: ${NEXTCLOUD_HOST}
    volumes:
      - nextcloud_data:/var/www/html
      - nextcloud_apps:/var/www/html/custom_apps
      - nextcloud_config:/var/www/html/config
      - ./nextcloud/uploads:/var/www/html/data
    networks:
      - tbgs-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/status.php"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Portainer Container Management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: tbgs-portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    networks:
      - tbgs-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3